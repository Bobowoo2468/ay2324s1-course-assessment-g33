name: System test

on:
  pull_request:
    branches: [ "master" ]

jobs:
  deploy:
    name: Build Image
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: public.ecr.aws/a6n0p1z7
      ECR_REPOSITORY: peercode-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.24.0'
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
        aws-region: ap-southeast-1

    - name: Create ConfigMap from Secret
      run: |
        echo $SECRET | base64 --decode > k8/secret.yaml
      env:
        SECRET: ${{ secrets.SECRET }}

    - name: Update kube config
      run: aws eks update-kubeconfig --name peercode-test-1

    - name: Set configs & base services on EKS
      run: |
        kubectl apply -f k8/config.yaml
        kubectl apply -f k8/secret.yaml
        kubectl apply -f k8/peercode-kafka.yaml
        kubectl apply -f k8/peercode-zookeeper.yaml

    - name: server; build tag push(ecr) deploy
      env:
        IMAGE_TAG: ${{ github.sha }}-peercode-server-service
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        cd backend/server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        cd ../..
        ECR="$ECR_REGISTRY/$ECR_REPOSITORY" SHA=$IMAGE_TAG envsubst < k8/peercode-server.yaml | kubectl apply -f -

    - name: match service; build tag push(ecr) deploy
      env:
        IMAGE_TAG: ${{ github.sha }}-peercode-match-service
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        cd backend/match_service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        cd ../..
        ECR="$ECR_REGISTRY/$ECR_REPOSITORY" SHA=$IMAGE_TAG envsubst < k8/peercode-match-service.yaml | kubectl apply -f -

    - name: question service; build tag push(ecr) deploy
      env:
        IMAGE_TAG: ${{ github.sha }}-peercode-question-service
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        cd backend/question_service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        cd ../..
        ECR="$ECR_REGISTRY/$ECR_REPOSITORY" SHA=$IMAGE_TAG envsubst < k8/peercode-question-service.yaml | kubectl apply -f -

    - name: leetcode service; build tag push(ecr) deploy
      env:
        IMAGE_TAG: ${{ github.sha }}-peercode-leetcode-service
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        cd backend/leetcode_service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        cd ../..
        ECR="$ECR_REGISTRY/$ECR_REPOSITORY" SHA=$IMAGE_TAG envsubst < k8/peercode-leetcode-service.yaml | kubectl apply -f -

    - name: react; build tag push(ecr) deploy
      env:
        IMAGE_TAG: ${{ github.sha }}-peercode-react
        FRONTEND_ENV_BASE64: ${{ secrets.FRONTEND_ENV_BASE64 }}
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        cd frontend
        echo $FRONTEND_ENV_BASE64 | base64 --decode > .env
        docker build $(cat .env | xargs -n 1 | awk '{print "--build-arg", $1}') -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        cd ..
        ECR="$ECR_REGISTRY/$ECR_REPOSITORY" SHA=$IMAGE_TAG envsubst < k8/peercode-react.yaml | kubectl apply -f -

  test:
    name: System test
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Checking out repo
      uses: actions/checkout@v3
  
    - name: Setting up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Installing package list
      run: apt list --installed    
      
    - name: Removing previous chrome instances on runner 
      run: sudo apt purge google-chrome-stable  
        
    - name: Installing all necessary packages
      run: pip install chromedriver-autoinstaller selenium

    - name: Installing pytest
      run: pip install pytest

    - name: Run tests
      run: |
        cd system_test
        pytest