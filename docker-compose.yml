version: '3'
services:
    server:
        image: cs3219_server
        container_name: cs3219_server
        restart: always
        build:
            context: ./backend/server
            dockerfile: Dockerfile
        command: bash run.sh
        ports:
            - 5000:5000
        environment:
            MONGO_PEERCODE_HOST_NAME: ${MONGO_PEERCODE_HOST_NAME}
            MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
            MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
            MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
            KAFKA_SERVER_NAME: ${KAFKA_SERVER_NAME}
            KAFKA_TOPICS: ${KAFKA_TOPICS}
            KAFKA_TOPIC_QUESTION_SERVICE: ${KAFKA_TOPIC_QUESTION_SERVICE}
            KAFKA_TOPIC_QUESTION_BANK: ${KAFKA_TOPIC_QUESTION_BANK}
            KAFKA_TOPIC_QUESTION_OF_THE_DAY: ${KAFKA_TOPIC_QUESTION_OF_THE_DAY}
            KAFKA_GROUP_SERVER: ${KAFKA_GROUP_SERVER}
        networks:
            - network
    question_service:
        image: cs3219_question_service
        container_name: cs3219_question_service
        restart: always
        build:
            context: ./backend/question_service
            dockerfile: Dockerfile
        command: bash run.sh
        ports:
            - 5001:5000
        depends_on:
            - peercode_kafka
            - server
        environment:
            MONGO_PEERCODE_HOST_NAME: ${MONGO_PEERCODE_HOST_NAME}
            MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
            MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
            MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
            KAFKA_SERVER_NAME: ${KAFKA_SERVER_NAME}
            KAFKA_TOPICS: ${KAFKA_TOPICS}
            KAFKA_TOPIC_QUESTION_SERVICE: ${KAFKA_TOPIC_QUESTION_SERVICE}
            KAFKA_TOPIC_QUESTION_BANK: ${KAFKA_TOPIC_QUESTION_BANK}
            KAFKA_TOPIC_QUESTION_OF_THE_DAY: ${KAFKA_TOPIC_QUESTION_OF_THE_DAY}
            KAFKA_GROUP_QUESTION_SERVICE: ${KAFKA_GROUP_QUESTION_SERVICE}
        networks:
            - network
    leetcode_service:
        image: cs3219_leetcode_service
        container_name: cs3219_leetcode_service
        restart: always
        build:
            context: ./backend/leetcode_service
            dockerfile: Dockerfile
        command: bash run.sh
        depends_on:
            - peercode_kafka
            - server
        environment:
            MONGO_PEERCODE_HOST_NAME: ${MONGO_PEERCODE_HOST_NAME}
            MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
            MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
            MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
            KAFKA_SERVER_NAME: ${KAFKA_SERVER_NAME}
            KAFKA_TOPICS: ${KAFKA_TOPICS}
            KAFKA_TOPIC_QUESTION_SERVICE: ${KAFKA_TOPIC_QUESTION_SERVICE}
            KAFKA_TOPIC_QUESTION_BANK: ${KAFKA_TOPIC_QUESTION_BANK}
            KAFKA_TOPIC_QUESTION_OF_THE_DAY: ${KAFKA_TOPIC_QUESTION_OF_THE_DAY}
            KAFKA_GROUP_LEETCODE_SERVICE: ${KAFKA_GROUP_LEETCODE_SERVICE}
        networks:
            - network
    react:
      image: cs3219_react
      container_name: cs3219_react
      restart: always
      build:
        context: ./frontend
        dockerfile: Dockerfile
      command: npm start
      ports:
          - 3000:3000
      # environment:
      # volumes:
      depends_on:
        - server
      networks:
          - network
          
    peercode_kafka:
        image: confluentinc/cp-kafka:7.0.0
        container_name: peercode_kafka
        ports:
            - "9092:9092"
            - "19092:19092"
        restart: always
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'peercode_zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://peercode_kafka:9092,PLAINTEXT_INTERNAL://broker:29092,PLAINTEXT_HOST://localhost:19092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        depends_on:
            - peercode_zookeeper
        networks:
            - network

    peercode_zookeeper:
        image: confluentinc/cp-zookeeper:7.0.0
        container_name: peercode_zookeeper
        ports:
            - "2181:2181"
        restart: always
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - network
    peercode_mongo:
        image: mongo:6
        container_name: peercode_mongo
        restart: always
        ports:
            - 27017:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
            MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
            MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
            MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
        volumes:
            - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
        networks:
            - network
    peercode_mongo_express:
        image: mongo-express:1.0.0-alpha
        container_name: peercode_mongo_express
        restart: always
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
            ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@peercode_mongo:27017/
        depends_on:
            - peercode_mongo
        networks:
            - network
networks:
    network:
# volumes:
